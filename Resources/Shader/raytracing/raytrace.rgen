#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../common/raycommon.glsl"

#include "../../../include/common/host_device_shared_vars.h"

#include "../../../include/renderer/GlobalUBO.h"
#include "../../../include/renderer/SceneUBO.h"
#include "../../../include/renderer/pushConstants/PushConstantRayTracing.h"

layout(location = 0) rayPayloadEXT HitPayload payload;

layout (set = 0, binding = globalUBO_BINDING) uniform _GlobalUBO {
    GlobalUBO globalUBO;
};

layout (set = 0, binding = sceneUBO_BINDING) uniform _SceneUBO {
    SceneUBO sceneUBO;
};

layout(set = 1, binding = TLAS_BINDING) uniform accelerationStructureEXT TLAS;
layout(set = 1, binding = OUT_IMAGE_BINDING, rgba8) uniform image2D image; 

layout(push_constant) uniform _PushConstantRay {
    PushConstantRaytracing pc_ray;
};

void main() {
    
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 pixel_center_UV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2 pixel_center_cs = pixel_center_UV * 2.0f - 1.0f;

    // vec4(0,0,0,1) in homogenous coordinates hints that it is the position in the origin
    // assumption: origin is the standpoint from the viewer
    // the inverse gets us the actual world space position
    vec4 origin = inverse(globalUBO.view) * vec4(0, 0, 0, 1);
    // do not forget to invert the y-coord since we are in vulkan
    vec4 target = inverse(globalUBO.projection) * vec4(pixel_center_cs.x, -pixel_center_cs.y, 1, 1);
    vec4 direction = inverse(globalUBO.view) * vec4(normalize(target.xyz), 0);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    traceRayEXT(TLAS,
                ray_flags, 
                0xFF, // cull mask 
                0,       // sbt record offset 
                0,      //record stride
                0,      // miss index
                origin.xyz,
                t_min,
                direction.xyz,
                t_max,
                0);         // payload (location = 0)


    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hit_value, 1.0));
    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(gl_LaunchIDEXT.xy,0.0, 1.0));

}