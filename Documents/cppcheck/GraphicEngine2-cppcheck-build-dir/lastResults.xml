<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="254" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="254" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="255" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="255" info="Address of variable taken here."/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2314"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2403"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2520"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2639"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2925"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2943"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;GlyphOffset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;GlyphOffset&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2712"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; unsigned short &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; unsigned short &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTextRange &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTextRange &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; char &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; char &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiStoragePair &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiStoragePair &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImDrawCmd &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImDrawCmd &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImDrawChannel &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImDrawChannel &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImDrawVert &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImDrawVert &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImVec4 &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImVec4 &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; void * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; void * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImVec2 &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImVec2 &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; unsigned int &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; unsigned int &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFont * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFont * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFontAtlasCustomRect &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFontAtlasCustomRect &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFontConfig &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFontConfig &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; float &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; float &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFontGlyph &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFontGlyph &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; VkSurfaceFormatKHR &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; VkSurfaceFormatKHR &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_vulkan.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; VkPresentModeKHR &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; VkPresentModeKHR &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/backends/imgui_impl_vulkan.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImDrawList * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImDrawList * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiListClipperRange &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiListClipperRange &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiOldColumnData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiOldColumnData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiStackLevelInfo &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiStackLevelInfo &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiInputEvent &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiInputEvent &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiWindow * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiWindow * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiWindowStackData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiWindowStackData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiColorMod &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiColorMod &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiStyleMod &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiStyleMod &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; int &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; int &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiGroupData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiGroupData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiPopupData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiPopupData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiViewportP * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiViewportP * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; unsigned char &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; unsigned char &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiListClipperData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiListClipperData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTableTempData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTableTempData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiPtrOrIndex &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiPtrOrIndex &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiShrinkWidthItem &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiShrinkWidthItem &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiSettingsHandler &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiSettingsHandler &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiContextHook &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiContextHook &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiOldColumns &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiOldColumns &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTabItem &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTabItem &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTableInstanceData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTableInstanceData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTableColumnSortSpecs &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTableColumnSortSpecs &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTable &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTable &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiTabBar &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiTabBar &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImGuiStorage :: ImGuiStoragePair &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImGuiStorage :: ImGuiStoragePair &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; MyItem &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; MyItem &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; char * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; char * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; const char * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; const char * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; MyDocument &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; MyDocument &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; MyDocument * &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; MyDocument * &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesDefault&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesDefault&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2775" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="2811" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesKorean&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesKorean&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2776" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="2821" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesJapanese&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesJapanese&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2777" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="2932" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesChineseFull&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesChineseFull&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2778" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="2834" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2779" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="2864" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesCyrillic&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesCyrillic&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2780" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="3022" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesThai&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesThai&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2781" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="3035" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImFontAtlas::GetGlyphRangesVietnamese&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImFontAtlas::GetGlyphRangesVietnamese&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="2782" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="3047" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFontBuildSrcData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFontBuildSrcData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; ImFontBuildDstData &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; ImFontBuildDstData &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; stbrp_rect &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; stbrp_rect &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImVector &amp;lt; stbtt_packedchar &amp;gt;::max_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImVector &amp;lt; stbtt_packedchar &amp;gt;::max_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.h" line="1789"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_glfw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\backends\imgui_impl_glfw.cpp" line="110"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_vulkan.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\backends\imgui_impl_vulkan.h" line="150"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/backends/imgui_impl_vulkan.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\backends\imgui_impl_vulkan.h" line="150"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="260"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="270"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="300"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="310"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="320"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="331"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x2.inl" line="340"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="262"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="272"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="282"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="292"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="329"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="347"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="356"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2&amp;#039; definition &amp;#039;v1, v2, v3&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2&amp;#039; definition &amp;#039;v1, v2, v3&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.inl" line="106" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x3.hpp" line="45" info=""/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="266"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="276"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="286"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="296"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="306"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="316"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="326"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="337"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat3x4.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="279"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="291"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="301"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="358"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x2.inl" line="368"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="279"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="280"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="290"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="291"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="301"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="302"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="358"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="368"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2, v3&amp;#039; definition &amp;#039;v1, v2, v3, v4&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2, v3&amp;#039; definition &amp;#039;v1, v2, v3, v4&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.inl" line="113" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x3.hpp" line="47" info=""/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="312"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="313"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="323"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="324"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="334"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="335"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="345"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="346"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="356"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="357"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="367"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="368"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="385"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="386"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="404"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="405"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="414"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;this-&amp;gt;value[2]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="415"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2, v3&amp;#039; definition &amp;#039;v1, v2, v3, v4&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1, v2, v3&amp;#039; definition &amp;#039;v1, v2, v3, v4&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.inl" line="154" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat4x4.hpp" line="46" info=""/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1&amp;#039; definition &amp;#039;v1, v2&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1&amp;#039; definition &amp;#039;v1, v2&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x3.inl" line="95" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x3.hpp" line="45" info=""/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1&amp;#039; definition &amp;#039;v1, v2&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;v0, v1&amp;#039; definition &amp;#039;v1, v2&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x4.inl" line="97" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x4.hpp" line="45" info=""/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\func_common.inl" line="36"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;x1, y1, x2, y2&amp;#039; definition &amp;#039;x0, y0, x1, y1&amp;#039;" verbose="Function &amp;#039;mat&amp;#039; argument order different: declaration &amp;#039;x1, y1, x2, y2&amp;#039; definition &amp;#039;x0, y0, x1, y1&amp;#039;" cwe="683" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x2.inl" line="49" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_mat2x2.hpp" line="41" info=""/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="46"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="74"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="84"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="101"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="46" info="Integer overflow"/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="74" info="Integer overflow"/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="84" info="Integer overflow"/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;s&amp;lt;&amp;lt;31&amp;#039;." cwe="190" file0="../../Src/scene/Camera.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="101" info="Integer overflow"/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_half.inl" line="33" info="Assignment &amp;#039;s=(value&amp;gt;&amp;gt;15)&amp;amp;0x00000001&amp;#039;, assigned value is 1"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;w&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;w&amp;#039; might be accessed at non-zero index." cwe="758" file0="../../Src/scene/Vertex.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_quat.inl" line="81" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_quat.inl" line="81" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;w&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;w&amp;#039; might be accessed at non-zero index." cwe="758" file0="../../Src/scene/Vertex.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\detail\type_quat.inl" line="92" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\detail\type_quat.inl" line="92" info="Address of variable taken here."/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;operator*&amp;#039; argument order different: declaration &amp;#039;q, p&amp;#039; definition &amp;#039;p, o&amp;#039;" verbose="Function &amp;#039;operator*&amp;#039; argument order different: declaration &amp;#039;q, p&amp;#039; definition &amp;#039;p, o&amp;#039;" cwe="683" file0="../../Src/scene/Vertex.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLM\glm\gtx\dual_quaternion.inl" line="153" info=""/>
            <location file="..\..\ExternalLib\GLM\glm\gtx\dual_quaternion.hpp" line="104" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ShaderHelper::getShaderSpvDir&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ShaderHelper::getShaderSpvDir&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../Src/vulkan_base/ShaderHelper.cpp" sinceDate="20.05.2022">
            <location file="..\..\include\vulkan_base\ShaderHelper.h" line="15" info=""/>
            <location file="..\..\Src\vulkan_base\ShaderHelper.cpp" line="38" info=""/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Allocator::vmaAllocator&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Allocator::vmaAllocator&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/memory/Allocator.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\memory\Allocator.cpp" line="4"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;file_name&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;file_name&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/memory/Allocator.cpp" sinceDate="20.05.2022">
            <location file="..\..\include\common\Utilities.h" line="25"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;shader_src_dir&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;shader_src_dir&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/vulkan_base/ShaderHelper.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\ShaderHelper.cpp" line="9"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;shader_name&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;shader_name&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/vulkan_base/ShaderHelper.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\ShaderHelper.cpp" line="9"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;shader_src_dir&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;shader_src_dir&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/vulkan_base/ShaderHelper.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\ShaderHelper.cpp" line="38"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;shader_name&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;shader_name&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/vulkan_base/ShaderHelper.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\ShaderHelper.cpp" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Model::mesh_model_index&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Model::mesh_model_index&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Model.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Model.cpp" line="3"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;model&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;model&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../../Src/scene/Model.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Model.cpp" line="10"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;new_mesh_list&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;new_mesh_list&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/scene/Model.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Model.cpp" line="7"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;Model::get_mesh_count&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;Model::get_mesh_count&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../Src/scene/Model.cpp" sinceDate="20.05.2022">
            <location file="..\..\include\scene\Model.h" line="19" info=""/>
            <location file="..\..\Src\scene\Model.cpp" line="28" info=""/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::object_description_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::object_description_buffer&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="9"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::object_description_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::object_description_buffer_memory&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="9"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::object_description&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::object_description&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::vertex_count&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::vertex_count&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::vertex_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::vertex_buffer&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::vertex_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::vertex_buffer_memory&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::index_count&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::index_count&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::index_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::index_buffer&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::index_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::index_buffer_memory&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::object_description_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::object_description_buffer&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::object_description_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::object_description_buffer_memory&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::material_ids_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::material_ids_buffer&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::material_ids_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::material_ids_buffer_memory&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::materials_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::materials_buffer&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::materials_buffer_memory&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::materials_buffer_memory&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::physical_device&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::physical_device&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Mesh::device&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Mesh::device&amp;#039; is not initialized in the constructor." inconclusive="true" cwe="398" file0="../../Src/scene/Mesh.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\Mesh.cpp" line="5"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;back&amp;#039;." verbose="Non-pure function: &amp;#039;back&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_tables.cpp" line="1332"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;ImRect&amp;#039;." verbose="Non-pure function: &amp;#039;ImRect&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_tables.cpp" line="2480"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_tables.cpp" line="3398"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;begin&amp;#039;." verbose="Non-pure function: &amp;#039;begin&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="674"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;end&amp;#039;." verbose="Non-pure function: &amp;#039;end&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="674"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;begin&amp;#039;." verbose="Non-pure function: &amp;#039;begin&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="677"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;end&amp;#039;." verbose="Non-pure function: &amp;#039;end&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="677"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="960"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1016"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1045"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1080"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1099"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1113"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1217"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1256"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1377"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1398"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="1532"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="2170"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="2279"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="2415"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="2439"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="2476"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImChunkStream &amp;lt; ImGuiWindowSettings &amp;gt;::chunk_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImChunkStream &amp;lt; ImGuiWindowSettings &amp;gt;::chunk_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="675"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;ImChunkStream &amp;lt; ImGuiTableSettings &amp;gt;::chunk_size&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;ImChunkStream &amp;lt; ImGuiTableSettings &amp;gt;::chunk_size&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../ExternalLib/IMGUI/imgui_tables.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_internal.h" line="675"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;back&amp;#039;." verbose="Non-pure function: &amp;#039;back&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="6854"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="1117"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="2538"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="3238"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;WindowPadding&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;WindowPadding&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="1042"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;parent_window&amp;#039; is redundant or there is possible null pointer dereference: parent_window." verbose="Either the condition &amp;#039;parent_window&amp;#039; is redundant or there is possible null pointer dereference: parent_window." cwe="476" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="6567" info="Null pointer dereference"/>
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="6593" info="Assuming that condition &amp;#039;parent_window&amp;#039; is not redundant"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." cwe="664" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="2393"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." cwe="664" file0="../../ExternalLib/IMGUI/imgui.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui.cpp" line="2398"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;begin&amp;#039;." verbose="Non-pure function: &amp;#039;begin&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_demo.cpp" line="1460"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is redundant or strchr() argument nr 2 can have invalid value. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Either the condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is redundant or strchr() argument nr 2 can have invalid value. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_demo.cpp" line="1362" info="Invalid argument"/>
            <location file="..\..\ExternalLib\IMGUI\imgui_demo.cpp" line="1362" info="Assuming that condition &amp;#039;data-&amp;gt;EventChar&amp;lt;256&amp;#039; is not redundant"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;Color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;Color&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../../ExternalLib/IMGUI/imgui_demo.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_demo.cpp" line="7665"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="377"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="413"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="1913"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_draw.cpp" line="1978"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="../../ExternalLib/GLFW/src/context.c" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLFW\src\context.c" line="756"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variables: ranges.h_oversample, ranges.v_oversample" verbose="Uninitialized variables: ranges.h_oversample, ranges.v_oversample" cwe="457" file0="../../ExternalLib/IMGUI/imgui_draw.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imstb_truetype.h" line="4319" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imstb_truetype.h" line="4355" info="Calling function &amp;#039;stbtt_PackFontRanges&amp;#039;, 4th argument &amp;#039;&amp;amp;range&amp;#039; value is &amp;lt;Uninit&amp;gt;"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;signature[8]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;signature[8]&amp;#039; accessed at index 10, which is out of bounds." cwe="788" file0="../../Src/App.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\STB\stb_image.h" line="7013"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="../../ExternalLib/GLFW/src/egl_context.c" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\GLFW\src\egl_context.c" line="275"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to evaluate #if condition" verbose="failed to evaluate #if condition" sinceDate="20.05.2022">
            <location file="..\..\build\_deps\googletest-src\googletest\include\gtest\internal\gtest-port.h" line="2292"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;modelFile&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;modelFile&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/scene/ObjLoader.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\ObjLoader.cpp" line="14"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;matToTex&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;matToTex&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../../Src/scene/ObjLoader.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\ObjLoader.cpp" line="14"/>
        </error>
        <error id="stlFindInsert" severity="performance" msg="Searching before insertion is not necessary. Instead of &amp;#039;vertices_map[vert]=vertices.size()&amp;#039; consider using &amp;#039;vertices_map.try_emplace(vert, vertices.size());&amp;#039;." verbose="Searching before insertion is not necessary. Instead of &amp;#039;vertices_map[vert]=vertices.size()&amp;#039; consider using &amp;#039;vertices_map.try_emplace(vert, vertices.size());&amp;#039;." cwe="398" file0="../../Src/scene/ObjLoader.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\scene\ObjLoader.cpp" line="92"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;GUI::device&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;GUI::device&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/gui/GUI.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\gui\GUI.cpp" line="4"/>
        </error>
        <error id="invalidLifetime" severity="error" msg="Using object that points to local variable &amp;#039;priority&amp;#039; that is out of scope." verbose="Using object that points to local variable &amp;#039;priority&amp;#039; that is out of scope." cwe="562" file0="../../Src/vulkan_base/VulkanDevice.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="180" info=""/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="124" info="Variable created here."/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="127" info="Added to container &amp;#039;queue_create_infos&amp;#039;."/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="125" info="Address of variable taken here."/>
        </error>
        <error id="invalidLifetime" severity="error" msg="Using object that points to local variable &amp;#039;priority&amp;#039; that is out of scope." verbose="Using object that points to local variable &amp;#039;priority&amp;#039; that is out of scope." cwe="562" file0="../../Src/vulkan_base/VulkanDevice.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="181" info=""/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="124" info="Variable created here."/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="127" info="Added to container &amp;#039;queue_create_infos&amp;#039;."/>
            <location file="..\..\Src\vulkan_base\VulkanDevice.cpp" line="125" info="Address of variable taken here."/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;VulkanDebug::vulkanInstance&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;VulkanDebug::vulkanInstance&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/vulkan_base/VulkanDebug.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanDebug.cpp" line="3"/>
        </error>
        <error id="invalidLifetime" severity="error" msg="Using object that points to local variable &amp;#039;queue_family_indices&amp;#039; that is out of scope." verbose="Using object that points to local variable &amp;#039;queue_family_indices&amp;#039; that is out of scope." cwe="562" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="78" info=""/>
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="59" info="Variable created here."/>
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="66" info="Array decayed to pointer here."/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;VulkanSwapChain::device&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;VulkanSwapChain::device&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="4"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;VulkanSwapChain::window&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;VulkanSwapChain::window&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="4"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;VulkanSwapChain::swap_chain_image_format&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;VulkanSwapChain::swap_chain_image_format&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="4"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;VulkanSwapChain::swap_chain_extent&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;VulkanSwapChain::swap_chain_extent&amp;#039; is not initialized in the constructor." cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="4"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;VulkanSwapChain::choose_best_surface_format&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;VulkanSwapChain::choose_best_surface_format&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\include\vulkan_base\VulkanSwapChain.h" line="33" info=""/>
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="128" info=""/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &amp;#039;VulkanSwapChain::choose_best_presentation_mode&amp;#039; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &amp;#039;VulkanSwapChain::choose_best_presentation_mode&amp;#039; can be made a static function. Making a function static can bring a performance benefit since no &amp;#039;this&amp;#039; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." inconclusive="true" cwe="398" file0="../../Src/vulkan_base/VulkanSwapChain.cpp" sinceDate="20.05.2022">
            <location file="..\..\include\vulkan_base\VulkanSwapChain.h" line="34" info=""/>
            <location file="..\..\Src\vulkan_base\VulkanSwapChain.cpp" line="156" info=""/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, &amp;#039;pCreateInfo&amp;#039; doesn&amp;#039;t have a parent." verbose="Syntax Error: AST broken, &amp;#039;pCreateInfo&amp;#039; doesn&amp;#039;t have a parent." file0="../../Src/renderer/VulkanRenderer.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\VULKAN_MEMORY_ALLOCATOR\include\vk_mem_alloc.h" line="16039"/>
        </error>
        <error id="argumentSize" severity="warning" msg="Buffer &amp;#039;col&amp;#039; is too small, the function &amp;#039;ColorEdit4&amp;#039; expects a bigger buffer in 2nd argument" verbose="Buffer &amp;#039;col&amp;#039; is too small, the function &amp;#039;ColorEdit4&amp;#039; expects a bigger buffer in 2nd argument" cwe="398" file0="../../ExternalLib/IMGUI/imgui_widgets.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="4834" info=""/>
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="4832" info="Passing buffer &amp;#039;col&amp;#039; to function that is declared here"/>
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="4864" info="Declaration of 2nd function argument."/>
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="4834" info="Function &amp;#039;ColorEdit4&amp;#039; is called"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_widgets.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="7192"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758" file0="../../ExternalLib/IMGUI/imgui_widgets.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="7208"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from const float * to const unsigned char * is not portable due to different binary data representations on different platforms." verbose="Casting from const float * to const unsigned char * is not portable due to different binary data representations on different platforms." inconclusive="true" cwe="704" file0="../../ExternalLib/IMGUI/imgui_widgets.cpp" sinceDate="20.05.2022">
            <location file="..\..\ExternalLib\IMGUI\imgui_widgets.cpp" line="6593"/>
        </error>
    </errors>
</results>
