countof
identity call:[genType] noreturn:[genType]
identity call:[genType] noreturn:[genType]
length
call
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
operator=
operator+=
operator+=
operator+=
operator-=
operator-=
operator-=
operator*=
operator*=
operator*=
operator/=
operator/=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator%=
operator%=
operator%=
operator&=
operator&=
operator&=
operator|=
operator|=
operator|=
operator^=
operator^=
operator^=
operator<<=
operator<<=
operator<<=
operator>>=
operator>>=
operator>>=
operator+
operator-
operator+
operator+
operator+
operator+
operator+
operator-
operator-
operator-
operator-
operator-
operator*
operator*
operator*
operator*
operator*
operator/
operator/
operator/
operator/
operator/
operator%
operator%
operator%
operator%
operator%
operator&
operator&
operator&
operator&
operator&
operator|
operator|
operator|
operator|
operator|
operator^
operator^
operator^
operator^
operator^
operator<<
operator<<
operator<<
operator<<
operator<<
operator>>
operator>>
operator>>
operator>>
operator>>
operator~
operator== call:[call] noreturn:[call]
operator!=
operator&&
operator||
length
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
operator=
operator+=
operator+=
operator+=
operator-=
operator-=
operator-=
operator*=
operator*=
operator*=
operator/=
operator/=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator%=
operator%=
operator%=
operator&=
operator&=
operator&=
operator|=
operator|=
operator|=
operator^=
operator^=
operator^=
operator<<=
operator<<=
operator<<=
operator>>=
operator>>=
operator>>=
operator+
operator-
operator+
operator+
operator+
operator+
operator+
operator-
operator-
operator-
operator-
operator-
operator*
operator*
operator*
operator*
operator*
operator/
operator/
operator/
operator/
operator/
operator%
operator%
operator%
operator%
operator%
operator&
operator&
operator&
operator&
operator&
operator|
operator|
operator|
operator|
operator|
operator^
operator^
operator^
operator^
operator^
operator<<
operator<<
operator<<
operator<<
operator<<
operator>>
operator>>
operator>>
operator>>
operator>>
operator~
operator== call:[call] noreturn:[call]
operator!=
operator&&
operator||
length
call
call
call
call
call
call
call
call
call
call
call call:[call] noreturn:[call]
call call:[call,sizeof] noreturn:[call]
call
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
vec
operator=
operator+= call:[call,return] noreturn:[return]
operator+= call:[call,return] noreturn:[return]
operator+= call:[call,return] noreturn:[return]
operator-= call:[call,return] noreturn:[return]
operator-= call:[call,return] noreturn:[return]
operator-= call:[call,return] noreturn:[return]
operator*= call:[call,return] noreturn:[return]
operator*= call:[call,return] noreturn:[return]
operator*= call:[call,return] noreturn:[return]
operator/= call:[call,return] noreturn:[return]
operator/= call:[call,return] noreturn:[return]
operator/= call:[call,return] noreturn:[return]
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator%= call:[call,return] noreturn:[return]
operator%= call:[call,return] noreturn:[return]
operator%= call:[call,return] noreturn:[return]
operator&= call:[call,return,sizeof] noreturn:[return]
operator&= call:[call,return,sizeof] noreturn:[return]
operator&= call:[call,return,sizeof] noreturn:[return]
operator|= call:[call,return,sizeof] noreturn:[return]
operator|= call:[call,return,sizeof] noreturn:[return]
operator|= call:[call,return,sizeof] noreturn:[return]
operator^= call:[call,return,sizeof] noreturn:[return]
operator^= call:[call,return,sizeof] noreturn:[return]
operator^= call:[call,return,sizeof] noreturn:[return]
operator<<= call:[call,return,sizeof] noreturn:[return]
operator<<= call:[call,return,sizeof] noreturn:[return]
operator<<= call:[call,return,sizeof] noreturn:[return]
operator>>= call:[call,return,sizeof] noreturn:[return]
operator>>= call:[call,return,sizeof] noreturn:[return]
operator>>= call:[call,return,sizeof] noreturn:[return]
operator+
operator-
operator+
operator+
operator+
operator+
operator+
operator-
operator-
operator-
operator-
operator-
operator*
operator*
operator*
operator*
operator*
operator/
operator/
operator/
operator/
operator/
operator%
operator%
operator%
operator%
operator%
operator&
operator&
operator&
operator&
operator&
operator|
operator|
operator|
operator|
operator|
operator^
operator^
operator^
operator^
operator^
operator<<
operator<<
operator<<
operator<<
operator<<
operator>>
operator>>
operator>>
operator>>
operator>>
operator~ call:[call,sizeof] noreturn:[call]
operator== call:[call,sizeof] noreturn:[call]
operator!= call:[call,sizeof] noreturn:[call]
operator&&
operator||
length
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator*= call:[return] noreturn:[return]
operator/=
operator/= call:[inverse] noreturn:[inverse]
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator+
operator-
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator/ call:[inverse]
operator/ call:[inverse] noreturn:[inverse]
operator/ call:[m1_copy]
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator-
operator-
operator*
operator*
operator* call:[col_type] noreturn:[col_type]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator== call:[return]
operator!= call:[return]
length
mat
mat
mat
mat
mat call:[static_assert] noreturn:[static_assert]
mat call:[static_assert] noreturn:[static_assert]
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator*= call:[return] noreturn:[return]
operator/=
operator/= call:[inverse] noreturn:[inverse]
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator+
operator-
operator-
operator-
operator*
operator*
operator* call:[Mov0,Mov1,Mov2,Mov3]
operator* call:[row_type] noreturn:[row_type]
operator*
operator*
operator*
operator/
operator/
operator/ call:[inverse]
operator/ call:[inverse] noreturn:[inverse]
operator/ call:[m1_copy]
operator== call:[return]
operator!= call:[return]
length
vec
vec
vec
vec
vec
vec
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator*=
operator/=
operator/=
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator%=
operator%=
operator&=
operator&=
operator|=
operator|=
operator^=
operator^=
operator<<=
operator<<=
operator>>=
operator>>=
operator+
operator-
operator+
operator+
operator+
operator-
operator-
operator-
operator*
operator*
operator*
operator/
operator/
operator/
operator%
operator%
operator%
operator&
operator&
operator&
operator|
operator|
operator|
operator^
operator^
operator^
operator<<
operator<<
operator<<
operator>>
operator>>
operator>>
operator~
operator== call:[call] noreturn:[call]
operator!=
operator&&
operator||
lessThan call:[Result]
lessThanEqual call:[Result]
greaterThan call:[Result]
greaterThanEqual call:[Result]
equal call:[Result]
notEqual call:[Result]
any
all
not_ call:[Result]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[Func]
call call:[call,static_assert] noreturn:[call]
call call:[call] noreturn:[call]
call call:[sqrt] noreturn:[sqrt]
call call:[tmp,xhalf]
pow call:[call] noreturn:[call]
exp call:[call] noreturn:[call]
log call:[call] noreturn:[call]
exp2 call:[call] noreturn:[call]
log2 call:[log2]
log2 call:[call] noreturn:[call]
sqrt call:[call,static_assert] noreturn:[call]
inversesqrt call:[sqrt] noreturn:[sqrt]
inversesqrt call:[call,static_assert] noreturn:[call]
call call:[genFIType,static_assert]
call call:[static_assert]
min call:[return,static_assert]
max call:[return,static_assert]
abs call:[return,sizeof]
call call:[call] noreturn:[call]
call call:[static_assert]
call call:[length]
call call:[static_assert]
call
call call:[static_assert]
call
call call:[lessThan]
call call:[call] noreturn:[call]
call call:[call] noreturn:[call]
call call:[floor] noreturn:[floor]
call call:[call] noreturn:[call]
call call:[call] noreturn:[call]
call call:[floor,static_assert] noreturn:[floor]
call call:[call] noreturn:[call]
call call:[call] noreturn:[call]
call call:[max,min] noreturn:[min]
call call:[lessThan,mix] noreturn:[mix]
call call:[clamp,static_assert,tmp]
abs call:[call] noreturn:[call]
abs call:[call] noreturn:[call]
sign call:[call,static_assert]
sign call:[call,static_assert] noreturn:[call]
floor call:[call,static_assert] noreturn:[call]
trunc call:[call,static_assert] noreturn:[call]
round call:[call,static_assert] noreturn:[call]
roundEven call:[fract,round,static_assert] noreturn:[round]
roundEven call:[call,static_assert] noreturn:[call]
ceil call:[call,static_assert] noreturn:[call]
fract call:[fract]
fract call:[call,static_assert] noreturn:[call]
mod call:[mod]
mod call:[call] noreturn:[call]
mod call:[call] noreturn:[call]
modf call:[modf,static_assert] noreturn:[modf]
modf call:[modf]
modf call:[modf]
modf call:[modf]
modf call:[modf]
min call:[call,static_assert] noreturn:[call]
min call:[call] noreturn:[call]
max call:[call,static_assert] noreturn:[call]
max call:[call] noreturn:[call]
clamp call:[max,min,static_assert] noreturn:[min]
clamp call:[call,static_assert] noreturn:[call]
clamp call:[call,static_assert] noreturn:[call]
mix call:[call] noreturn:[call]
mix call:[call] noreturn:[call]
mix call:[call] noreturn:[call]
step call:[mix] noreturn:[mix]
step call:[call] noreturn:[call]
step call:[call] noreturn:[call]
smoothstep call:[clamp,genType,static_assert,tmp]
smoothstep call:[call] noreturn:[call]
smoothstep call:[call] noreturn:[call]
isnan call:[isnan,length,static_assert] noreturn:[isnan]
isinf call:[isinf,length,static_assert] noreturn:[isinf]
floatBitsToInt
floatBitsToInt
floatBitsToUint
floatBitsToUint
intBitsToFloat
intBitsToFloat
uintBitsToFloat
uintBitsToFloat
frexp call:[frexp,static_assert] noreturn:[frexp]
frexp call:[frexp,length,static_assert] noreturn:[frexp]
ldexp call:[ldexp,static_assert] noreturn:[ldexp]
ldexp call:[ldexp,length,static_assert] noreturn:[ldexp]
call call:[dot,sqrt] noreturn:[sqrt]
call call:[length] noreturn:[length]
call
call call:[tmp]
call call:[tmp]
call call:[return,tmp]
call call:[static_assert]
call call:[dot,inversesqrt,static_assert] noreturn:[inversesqrt]
call call:[dot,static_assert]
call call:[dot]
call call:[dot,dotValue,k,sqrt]
length call:[abs,static_assert] noreturn:[abs]
length call:[call,static_assert] noreturn:[call]
distance call:[length,static_assert] noreturn:[length]
distance call:[call] noreturn:[call]
dot call:[static_assert]
dot call:[call,static_assert] noreturn:[call]
cross call:[call] noreturn:[call]
normalize call:[call,static_assert] noreturn:[call]
faceforward call:[dot]
faceforward call:[call] noreturn:[call]
reflect call:[dot,genType] noreturn:[genType]
reflect call:[call] noreturn:[call]
refract call:[dot,dotValue,k,return,sqrt,static_assert]
refract call:[call,static_assert] noreturn:[call]
call call:[length]
call call:[call,static_assert] noreturn:[call]
call call:[length]
call call:[call,static_assert] noreturn:[call]
call
call
call
call
call
call
call
call
call
call call:[call,static_assert] noreturn:[call]
call
call
call call:[DetCof]
call call:[call,static_assert] noreturn:[call]
call call:[Inverse]
call
call call:[Dot0,Fac0,Fac1,Fac2,Fac3,Fac4,Fac5,Inv0,Inv1,Inv2,Inv3,Inverse,Row0,SignA,SignB,Vec0,Vec1,Vec2,Vec3]
matrixCompMult call:[call] noreturn:[call]
outerProduct call:[call] noreturn:[call]
transpose call:[call] noreturn:[call]
determinant call:[call] noreturn:[call]
inverse call:[call,static_assert] noreturn:[call]
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
mat
operator=
operator+=
operator+=
operator-=
operator-=
operator*=
operator*= call:[return] noreturn:[return]
operator/=
operator/= call:[inverse] noreturn:[inverse]
operator++
operator--
operator++ call:[Result]
operator-- call:[Result]
operator+
operator-
operator+
operator+
operator+
operator-
operator-
operator-
operator*
operator*
operator*
operator*
operator*
operator*
operator*
operator/
operator/
operator/ call:[inverse]
operator/ call:[inverse] noreturn:[inverse]
operator/ call:[m1_copy]
operator== call:[return]
operator!= call:[return]
radians call:[static_assert]
radians call:[call] noreturn:[call]
degrees call:[static_assert]
degrees call:[call] noreturn:[call]
sin call:[call] noreturn:[call]
cos call:[call] noreturn:[call]
tan call:[call] noreturn:[call]
asin call:[call] noreturn:[call]
acos call:[call] noreturn:[call]
atan call:[atan2,static_assert] noreturn:[atan2]
atan call:[call] noreturn:[call]
atan call:[call] noreturn:[call]
sinh call:[call] noreturn:[call]
cosh call:[call] noreturn:[call]
tanh call:[call] noreturn:[call]
asinh call:[call] noreturn:[call]
acosh call:[call] noreturn:[call]
atanh call:[call] noreturn:[call]
overflow
uif32
uif32
uif32
toFloat32
toFloat16 call:[overflow,short] noreturn:[short]
packUnorm2x16 call:[clamp,result,round]
unpackUnorm2x16
packSnorm2x16 call:[clamp,result,round]
unpackSnorm2x16 call:[clamp] noreturn:[clamp]
packUnorm4x8 call:[clamp,result,round]
unpackUnorm4x8
packSnorm4x8 call:[clamp,result,round]
unpackSnorm4x8 call:[clamp] noreturn:[clamp]
packDouble2x32
unpackDouble2x32
packHalf2x16 call:[toFloat16]
unpackHalf2x16 call:[toFloat32]
mask call:[sizeof]
call
call call:[return]
call
call call:[return]
call call:[bitCount] noreturn:[bitCount]
call
call
call call:[bitCount,call,sizeof,x] noreturn:[bitCount]
uaddCarry call:[Max32,Value64]
uaddCarry call:[Max32,Value64,greaterThan,mix]
usubBorrow
usubBorrow call:[XgeY,YgeX,greaterThanEqual,mix] noreturn:[mix]
umulExtended
umulExtended call:[Value64]
imulExtended
imulExtended call:[Value64]
bitfieldExtract call:[bitfieldExtract]
bitfieldExtract call:[mask,return,static_assert]
bitfieldInsert call:[bitfieldInsert,static_assert]
bitfieldInsert call:[mask,return,static_assert]
bitfieldReverse call:[bitfieldReverse,static_assert]
bitfieldReverse call:[call,sizeof,static_assert,x]
bitCount call:[bitCount,static_assert]
bitCount call:[call,sizeof,static_assert,type,x]
findLSB call:[call,sizeof,static_assert] noreturn:[call]
findLSB call:[call,static_assert] noreturn:[call]
findMSB call:[findMSB,static_assert]
findMSB call:[call,sizeof,static_assert] noreturn:[call]
choose_supported_format call:[runtime_error,vkGetPhysicalDeviceFormatProperties] noreturn:[runtime_error]
epsilon call:[epsilon,static_assert] noreturn:[epsilon]
pi call:[static_assert]
cos_one_over_two call:[genType] noreturn:[genType]
zero call:[genType] noreturn:[genType]
one call:[genType] noreturn:[genType]
two_pi call:[genType] noreturn:[genType]
root_pi call:[genType] noreturn:[genType]
half_pi call:[genType] noreturn:[genType]
three_over_two_pi call:[genType] noreturn:[genType]
quarter_pi call:[genType] noreturn:[genType]
one_over_pi call:[genType] noreturn:[genType]
one_over_two_pi call:[genType] noreturn:[genType]
two_over_pi call:[genType] noreturn:[genType]
four_over_pi call:[genType] noreturn:[genType]
two_over_root_pi call:[genType] noreturn:[genType]
one_over_root_two call:[genType] noreturn:[genType]
root_half_pi call:[genType] noreturn:[genType]
root_two_pi call:[genType] noreturn:[genType]
root_ln_four call:[genType] noreturn:[genType]
e call:[genType] noreturn:[genType]
euler call:[genType] noreturn:[genType]
root_two call:[genType] noreturn:[genType]
root_three call:[genType] noreturn:[genType]
root_five call:[genType] noreturn:[genType]
ln_two call:[genType] noreturn:[genType]
ln_ten call:[genType] noreturn:[genType]
ln_ln_two call:[genType] noreturn:[genType]
third call:[genType] noreturn:[genType]
two_thirds call:[genType] noreturn:[genType]
golden_ratio call:[genType] noreturn:[genType]
projectZO call:[T]
projectNO call:[T]
project call:[projectNO] noreturn:[projectNO]
unProjectZO call:[T,inverse]
unProjectNO call:[T,inverse]
unProject call:[unProjectNO] noreturn:[unProjectNO]
pickMatrix call:[Result,Temp,assert,scale,translate] noreturn:[scale]
ortho call:[Result]
orthoLH_ZO call:[Result]
orthoLH_NO call:[Result]
orthoRH_ZO call:[Result]
orthoRH_NO call:[Result]
orthoZO call:[orthoRH_ZO] noreturn:[orthoRH_ZO]
orthoNO call:[orthoRH_NO] noreturn:[orthoRH_NO]
orthoLH call:[orthoLH_NO] noreturn:[orthoLH_NO]
orthoRH call:[orthoRH_NO] noreturn:[orthoRH_NO]
ortho call:[orthoRH_NO] noreturn:[orthoRH_NO]
frustumLH_ZO call:[Result]
frustumLH_NO call:[Result]
frustumRH_ZO call:[Result]
frustumRH_NO call:[Result]
frustumZO call:[frustumRH_ZO] noreturn:[frustumRH_ZO]
frustumNO call:[frustumRH_NO] noreturn:[frustumRH_NO]
frustumLH call:[frustumLH_NO] noreturn:[frustumLH_NO]
frustumRH call:[frustumRH_NO] noreturn:[frustumRH_NO]
frustum call:[frustumRH_NO] noreturn:[frustumRH_NO]
perspectiveRH_ZO call:[Result,abs,assert,epsilon,tan]
perspectiveRH_NO call:[Result,abs,assert,epsilon,tan]
perspectiveLH_ZO call:[Result,abs,assert,epsilon,tan]
perspectiveLH_NO call:[Result,abs,assert,epsilon,tan]
perspectiveZO call:[perspectiveRH_ZO] noreturn:[perspectiveRH_ZO]
perspectiveNO call:[perspectiveRH_NO] noreturn:[perspectiveRH_NO]
perspectiveLH call:[perspectiveLH_NO] noreturn:[perspectiveLH_NO]
perspectiveRH call:[perspectiveRH_NO] noreturn:[perspectiveRH_NO]
perspective call:[perspectiveRH_NO] noreturn:[perspectiveRH_NO]
perspectiveFovRH_ZO call:[Result,assert,cos,sin]
perspectiveFovRH_NO call:[Result,assert,cos,sin]
perspectiveFovLH_ZO call:[Result,assert,cos,sin]
perspectiveFovLH_NO call:[Result,assert,cos,sin]
perspectiveFovZO call:[perspectiveFovRH_ZO] noreturn:[perspectiveFovRH_ZO]
perspectiveFovNO call:[perspectiveFovRH_NO] noreturn:[perspectiveFovRH_NO]
perspectiveFovLH call:[perspectiveFovLH_NO] noreturn:[perspectiveFovLH_NO]
perspectiveFovRH call:[perspectiveFovRH_NO] noreturn:[perspectiveFovRH_NO]
perspectiveFov call:[perspectiveFovRH_NO] noreturn:[perspectiveFovRH_NO]
infinitePerspectiveRH call:[Result,tan]
infinitePerspectiveLH call:[Result,T,tan]
infinitePerspective call:[infinitePerspectiveRH] noreturn:[infinitePerspectiveRH]
tweakedInfinitePerspective call:[Result,tan]
tweakedInfinitePerspective call:[tweakedInfinitePerspective] noreturn:[tweakedInfinitePerspective]
identity call:[identity] noreturn:[identity]
translate call:[Result]
rotate call:[T,axis,cos,normalize,sin,temp]
rotate_slow call:[cos,normalize,sin]
scale
scale_slow call:[Result,T]
shear
shear_slow
lookAtRH call:[Result,cross,dot,f,normalize,s,u]
lookAtLH call:[Result,cross,dot,f,normalize,s,u]
lookAt call:[lookAtRH] noreturn:[lookAtRH]
float_t < float >
operator=
negative
mantissa
exponent call:[return]
float_t < double >
operator=
negative
mantissa call:[int64]
exponent call:[int64,return]
equal call:[equal] noreturn:[equal]
equal call:[abs,lessThanEqual] noreturn:[lessThanEqual]
notEqual call:[notEqual] noreturn:[notEqual]
notEqual call:[abs,greaterThan] noreturn:[greaterThan]
equal call:[equal] noreturn:[equal]
equal call:[Result,a,abs,b,exponent,mantissa,negative] noreturn:[exponent]
notEqual call:[notEqual] noreturn:[notEqual]
notEqual call:[equal,not_] noreturn:[not_]
dot call:[call,static_assert] noreturn:[call]
length call:[dot,sqrt] noreturn:[sqrt]
normalize call:[length]
cross
mix call:[acos,dot,mix,return,sin,static_assert] noreturn:[sin]
lerp call:[assert,static_assert]
slerp call:[acos,dot,mix,return,sin,static_assert] noreturn:[sin]
slerp call:[acos,dot,mix,return,sin,static_assert] noreturn:[sin]
conjugate
inverse call:[conjugate,dot] noreturn:[dot]
isnan call:[isnan,static_assert]
isinf call:[isinf,static_assert]
equal call:[length]
equal call:[abs,lessThan,v] noreturn:[lessThan]
notEqual call:[length]
notEqual call:[abs,greaterThanEqual,v] noreturn:[greaterThanEqual]
length
call call:[return,tmp]
call
call
call
call
call
qua
qua
qua
qua
qua call:[abs,cross,dot,normalize,sqrt] noreturn:[cross,normalize]
qua call:[T,cos,sin]
qua call:[quat_cast] noreturn:[quat_cast]
qua call:[quat_cast] noreturn:[quat_cast]
operator=
operator+= call:[call,return] noreturn:[return]
operator-= call:[call,return] noreturn:[return]
operator*= call:[p,q]
operator*= call:[call,return] noreturn:[return]
operator/= call:[call,return] noreturn:[return]
operator+
operator-
operator+
operator-
operator*
operator* call:[QuatVector,cross,uuv,uv]
operator* call:[inverse]
operator* call:[call] noreturn:[call]
operator* call:[inverse]
operator*
operator*
operator/
operator==
operator!=
angle call:[abs,acos,asin,sqrt]
axis call:[sqrt]
angleAxis call:[a,cos,sin]
rotate call:[AngleRad,abs,cos,length,sin]
epsilonEqual call:[abs]
epsilonEqual call:[abs]
epsilonEqual call:[abs,lessThan] noreturn:[lessThan]
epsilonEqual call:[abs,lessThan] noreturn:[lessThan]
epsilonNotEqual call:[abs]
epsilonNotEqual call:[abs]
epsilonNotEqual call:[abs,greaterThanEqual] noreturn:[greaterThanEqual]
epsilonNotEqual call:[abs,greaterThanEqual] noreturn:[greaterThanEqual]
epsilonEqual call:[abs,lessThan,v] noreturn:[lessThan]
epsilonNotEqual call:[abs,greaterThanEqual,v] noreturn:[greaterThanEqual]
eulerAngles call:[pitch,roll,yaw]
roll call:[all,atan,equal]
pitch call:[all,atan,equal]
yaw call:[asin,clamp] noreturn:[asin]
mat3_cast call:[Result,T,qwx,qwy,qwz,qxx,qxy,qxz,qyy,qyz,qzz]
mat4_cast call:[mat3_cast]
quat_cast call:[assert,sqrt]
quat_cast call:[quat_cast] noreturn:[quat_cast]
lessThan call:[length]
lessThanEqual call:[length]
greaterThan call:[length]
greaterThanEqual call:[length]
quatLookAt call:[quatLookAtRH] noreturn:[quatLookAtRH]
quatLookAtRH call:[cross,dot,inversesqrt,max,quat_cast] noreturn:[quat_cast]
quatLookAtLH call:[cross,dot,inversesqrt,max,quat_cast] noreturn:[quat_cast]
length
tdualquat
tdualquat
tdualquat
tdualquat
tdualquat
tdualquat call:[dualquat_cast] noreturn:[dualquat_cast]
tdualquat call:[dualquat_cast] noreturn:[dualquat_cast]
operator=
operator*=
operator/=
operator+
operator-
operator+
operator*
operator* call:[T,cross,dual_v3,real_v3,return]
operator* call:[inverse]
operator*
operator* call:[inverse]
operator*
operator*
operator/
operator== call:[return]
operator!= call:[return]
dual_quat_identity
normalize call:[length] noreturn:[length]
lerp call:[assert,dot,one]
inverse call:[conjugate,dot]
mat2x4_cast
mat3x4_cast call:[a,b,c,length2,rr]
dualquat_cast
dualquat_cast call:[T,sqrt]
hash_combine
operator() call:[hasher] noreturn:[hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator() call:[hash_combine,hasher]
operator==
operator() call:[return] noreturn:[return]
is_valid
getVulkanInstance
getPhysicalDeviceProperties
getPhysicalDevice
getLogicalDevice
getGraphicsQueue
getComputeQueue
getPresentationQueue
getBuffer
getBufferMemory
createBufferAndUploadVectorOnDevice call:[cleanUp,copyBuffer,create,data,getBufferMemory,getGraphicsQueue,getLogicalDevice,memcpy,size,sizeof,vkMapMemory,vkUnmapMemory] noreturn:[cleanUp]
getObjectDescription
getModel
getVertexCount
getIndexCount
getVertexBuffer call:[getBuffer] noreturn:[getBuffer]
getMaterialIDBuffer call:[getBuffer] noreturn:[getBuffer]
getIndexBuffer call:[getBuffer] noreturn:[getBuffer]
getImage
getImageView
getMipLevel
getVulkanImage
getVulkanImageView
getImage call:[getImage] noreturn:[getImage]
getImageView call:[getImageView] noreturn:[getImageView]
getTextureCount call:[size]
getTextures
getTextureSamplers
getTextureList
getMeshCount
getMesh
getModel
getCustomInstanceIndex
getObjectDescription call:[getObjectDescription] noreturn:[getObjectDescription]
attrib_t
GetVertices
GetVertexWeights
callback_t
MaterialReader
MaterialFileReader
MaterialFileReader
MaterialStreamReader
MaterialStreamReader
ObjReaderConfig
ObjReader
Valid
GetAttrib
GetShapes
GetMaterials
Warning
Error
MaterialReader
vertex_index_t
vertex_index_t
vertex_index_t
face_t
tag_sizes
clear call:[clear] noreturn:[clear]
IsEmpty call:[empty] noreturn:[empty]
safeGetline call:[clear,empty,rdbuf,sbumpc,se,setstate,sgetc] noreturn:[sbumpc,setstate]
fixIndex
parseString call:[strcspn,string,strspn]
parseInt call:[atoi,strcspn,strspn]
tryParseDouble call:[ldexp,pow,sizeof]
parseReal call:[strcspn,strspn,tryParseDouble]
parseReal call:[strcspn,strspn,tryParseDouble]
parseReal2 call:[parseReal] noreturn:[parseReal]
parseReal3 call:[parseReal] noreturn:[parseReal]
parseV call:[parseReal] noreturn:[parseReal]
parseVertexWithColor call:[parseReal]
parseOnOff call:[strcspn,strncmp,strspn]
parseTextureType call:[strcspn,strlen,strncmp,strspn]
parseTagTriple call:[atoi,parseInt,strcspn,strspn]
parseTriple call:[atoi,fixIndex,strcspn,vi]
parseRawTriple call:[atoi,strcspn,vi]
ParseTextureNameAndOption call:[length,parseInt,parseOnOff,parseReal,parseReal2,parseReal3,parseString,parseTextureType,strcspn,string,strncmp,strspn] noreturn:[parseInt,parseOnOff,parseReal,parseReal2,parseReal3,parseString,parseTextureType]
InitTexOpt
InitMaterial call:[InitTexOpt,clear] noreturn:[clear]
pnpoly
exportGroupsToShape call:[IsEmpty,empty,epsilon,fabs,i1,int,long,pnpoly,pop_back,push_back,size] noreturn:[pop_back,push_back]
SplitString call:[clear,empty,push_back,size] noreturn:[push_back]
JoinPath call:[empty,rbegin,string]
LoadMtl call:[InitMaterial,ParseTextureNameAndOption,assert,c_str,empty,erase,find_last_not_of,insert,key,parseInt,parseReal,parseReal3,peek,push_back,safeGetline,size,str,strchr,strncmp,strspn,substr] noreturn:[erase,insert,parseReal,push_back,str,strchr,substr]
operator() call:[JoinPath,LoadMtl,c_str,empty,f,getline,matIStream,push_back,size,str] noreturn:[push_back,str]
operator() call:[LoadMtl,str] noreturn:[str]
LoadObj call:[LoadObj,clear,empty,ifs,length,operator(),str] noreturn:[LoadObj,str]
LoadObj call:[SplitString,assert,c_str,clear,count,empty,end,erase,exportGroupsToShape,find,insert,int,parseInt,parseReal,parseReal2,parseReal3,parseString,parseTagTriple,parseTriple,parseVertexWithColor,peek,push_back,reserve,resize,safeGetline,shape_t,size,str,string,strlen,strncmp,strspn,swap] noreturn:[clear,erase,parseInt,parseReal,parseString,push_back,str,strspn]
LoadObjWithCallback call:[SplitString,assert,at,c_str,clear,count,empty,end,erase,find,group_cb,index_cb,insert,mtllib_cb,normal_cb,object_cb,parseRawTriple,parseReal3,parseString,parseV,peek,push_back,reserve,resize,safeGetline,size,str,string,strncmp,strspn,texcoord_cb,usemtl_cb,vertex_cb] noreturn:[c_str,erase,group_cb,index_cb,mtllib_cb,normal_cb,object_cb,str,strspn,texcoord_cb,usemtl_cb,vertex_cb]
ParseFromFile call:[LoadObj,c_str,empty,find_last_of,substr] noreturn:[substr]
ParseFromString call:[LoadObj,mtl_buf,mtl_ifs,obj_buf,obj_ifs,operator()]
ObjLoader
loadModel call:[addTexture,add_new_mesh,createFromFile,empty,getTextureCount,loadTexturesAndMaterials,loadVertices,matToTex,size] noreturn:[getTextureCount]
loadTexturesAndMaterials call:[Error,GetMaterials,ObjMaterial,ParseFromFile,Warning,emplace_back,empty,exit,getBaseDir,length,model_file,push_back,reserve,size] noreturn:[Error,Warning,emplace_back,exit,push_back]
loadVertices call:[Error,GetAttrib,GetMaterials,GetShapes,ParseFromFile,Warning,color,count,cross,empty,exit,long,normalize,normals,push_back,reserve,size,tex_coords] noreturn:[Error,Warning,exit,push_back]
