initJoysticks global:[_glfw] call:[initJoysticks,terminateJoysticks]
findMapping global:[_glfw] call:[strcmp]
isValidElementForJoystick
findValidMapping call:[findMapping,isValidElementForJoystick]
parseMapping global:[_glfw] call:[_glfwInputError,getMappingName,memcpy,sizeof,strcspn,strlen,strncmp,strspn,strtoul,updateGamepadGUID] noreturn:[strspn,strtoul]
_glfwInputKey call:[key] noreturn:[key]
_glfwInputChar call:[character,charmods] noreturn:[character,charmods]
_glfwInputScroll call:[scroll] noreturn:[scroll]
_glfwInputMouseClick call:[mouseButton] noreturn:[mouseButton]
_glfwInputCursorPos call:[cursorPos] noreturn:[cursorPos]
_glfwInputCursorEnter call:[cursorEnter] noreturn:[cursorEnter]
_glfwInputDrop call:[drop] noreturn:[drop]
_glfwInputJoystick global:[_glfw] call:[joystick] noreturn:[joystick]
_glfwInputJoystickAxis
_glfwInputJoystickButton
_glfwInputJoystickHat
_glfwInitGamepadMappings global:[_glfw,_glfwDefaultMappings] call:[_glfw_calloc,parseMapping,sizeof]
_glfwAllocJoystick global:[_glfw] call:[_glfw_calloc,findValidMapping,sizeof,strncpy]
_glfwFreeJoystick call:[_glfw_free,memset,sizeof] noreturn:[memset]
_glfwCenterCursorInContentArea global:[_glfw] call:[getWindowSize,setCursorPos] noreturn:[setCursorPos]
glfwGetInputMode global:[_glfw] call:[_glfwInputError,assert]
glfwSetInputMode global:[_glfw] call:[_glfwInputError,assert,getCursorPos,rawMouseMotionSupported,setCursorMode,setRawMouseMotion] noreturn:[_glfwInputError]
glfwRawMouseMotionSupported global:[_glfw] call:[_glfwInputError,rawMouseMotionSupported] noreturn:[rawMouseMotionSupported]
glfwGetKeyName global:[_glfw] call:[_glfwInputError,getKeyScancode,getScancodeName] noreturn:[getKeyScancode,getScancodeName]
glfwGetKeyScancode global:[_glfw] call:[_glfwInputError,getKeyScancode] noreturn:[getKeyScancode]
glfwGetKey global:[_glfw] call:[_glfwInputError,assert,return]
glfwGetMouseButton global:[_glfw] call:[_glfwInputError,assert,return]
glfwGetCursorPos global:[_glfw] call:[_glfwInputError,assert,getCursorPos] noreturn:[getCursorPos]
glfwSetCursorPos global:[_glfw] call:[_glfwInputError,assert,setCursorPos,windowFocused] noreturn:[setCursorPos]
glfwCreateCursor global:[_glfw] call:[_glfwInputError,_glfw_calloc,assert,createCursor,glfwDestroyCursor,return,sizeof]
glfwCreateStandardCursor global:[_glfw] call:[_glfwInputError,_glfw_calloc,createStandardCursor,glfwDestroyCursor,return,sizeof]
glfwDestroyCursor global:[_glfw] call:[_glfwInputError,_glfw_free,destroyCursor,glfwSetCursor] noreturn:[_glfw_free,glfwSetCursor]
glfwSetCursor global:[_glfw] call:[_glfwInputError,assert,setCursor] noreturn:[setCursor]
glfwSetKeyCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetCharCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetCharModsCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetMouseButtonCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetCursorPosCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetCursorEnterCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetScrollCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwSetDropCallback global:[_glfw] call:[_glfwInputError,assert,void]
glfwJoystickPresent global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick] noreturn:[pollJoystick]
glfwGetJoystickAxes global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetJoystickButtons global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetJoystickHats global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetJoystickName global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetJoystickGUID global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwSetJoystickUserPointer global:[_glfw] call:[_glfwInputError,assert]
glfwGetJoystickUserPointer global:[_glfw] call:[_glfwInputError,assert]
glfwSetJoystickCallback global:[_glfw] call:[_glfwInputError,initJoysticks,void]
glfwUpdateGamepadMappings global:[_glfw] call:[_glfwInputError,_glfw_realloc,assert,findMapping,findValidMapping,memcpy,parseMapping,sizeof,strcspn,strspn] noreturn:[findValidMapping,strspn]
glfwJoystickIsGamepad global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetGamepadName global:[_glfw] call:[_glfwInputError,assert,initJoysticks,pollJoystick]
glfwGetGamepadState global:[_glfw] call:[_glfwInputError,_glfw_fmaxf,_glfw_fminf,assert,initJoysticks,memset,pollJoystick,sizeof] noreturn:[_glfw_fminf]
glfwSetClipboardString global:[_glfw] call:[_glfwInputError,assert,setClipboardString] noreturn:[setClipboardString]
glfwGetClipboardString global:[_glfw] call:[_glfwInputError,getClipboardString] noreturn:[getClipboardString]
glfwGetTime global:[_glfw] call:[_glfwInputError,_glfwPlatformGetTimerFrequency,_glfwPlatformGetTimerValue,return] noreturn:[_glfwPlatformGetTimerFrequency]
glfwSetTime global:[_glfw] call:[_glfwInputError,_glfwPlatformGetTimerFrequency,_glfwPlatformGetTimerValue]
glfwGetTimerValue global:[_glfw] call:[_glfwInputError,_glfwPlatformGetTimerValue] noreturn:[_glfwPlatformGetTimerValue]
glfwGetTimerFrequency global:[_glfw] call:[_glfwInputError,_glfwPlatformGetTimerFrequency] noreturn:[_glfwPlatformGetTimerFrequency]
