.TH "sceneConfig" 3 "Tue Jun 7 2022" "Version 1.9" "GraphicsEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sceneConfig
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "std::string \fBgetModelFile\fP ()"
.br
.ti -1c
.RI "glm::mat4 \fBgetModelMatrix\fP ()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "std::string sceneConfig::getModelFile ()"

.PP
Definition at line \fB7\fP of file \fBSceneConfig\&.cpp\fP\&.
.PP
.nf
7                          {
8   std::stringstream modelFile;
9   modelFile << CMAKELISTS_DIR;
10 #if NDEBUG
11   modelFile << "/Resources/Model/crytek-sponza/";
12   modelFile << "sponza_triag\&.obj";
13 
14 #else
15 #ifdef SULO_MODE
16   modelFile << "/Resources/Model/Sulo/";
17   modelFile << "SuloLongDongLampe_v2\&.obj";
18 #else
19   modelFile << "/Resources/Model/VikingRoom/";
20   modelFile << "viking_room\&.obj";
21 #endif
22 #endif
23 
24   return modelFile\&.str();
25   // std::string modelFile =
26   // "\&.\&./Resources/Model/crytek-sponza/sponza_triag\&.obj"; std::string modelFile
27   // = "\&.\&./Resources/Model/Dinosaurs/dinosaurs\&.obj"; std::string modelFile =
28   // "\&.\&./Resources/Model/Pillum/PilumPainting_export\&.obj"; std::string modelFile
29   // = "\&.\&./Resources/Model/sibenik/sibenik\&.obj"; std::string modelFile =
30   // "\&.\&./Resources/Model/sportsCar/sportsCar\&.obj"; std::string modelFile =
31   // "\&.\&./Resources/Model/StanfordDragon/dragon\&.obj"; std::string modelFile =
32   // "\&.\&./Resources/Model/CornellBox/CornellBox-Sphere\&.obj"; std::string
33   // modelFile = "\&.\&./Resources/Model/bunny/bunny\&.obj"; std::string modelFile =
34   // "\&.\&./Resources/Model/buddha/buddha\&.obj"; std::string modelFile =
35   // "\&.\&./Resources/Model/bmw/bmw\&.obj"; std::string modelFile =
36   // "\&.\&./Resources/Model/testScene\&.obj"; std::string modelFile =
37   // "\&.\&./Resources/Model/San_Miguel/san-miguel-low-poly\&.obj";
38 }
.fi
.SS "glm::mat4 sceneConfig::getModelMatrix ()"

.PP
Definition at line \fB40\fP of file \fBSceneConfig\&.cpp\fP\&.
.PP
.nf
40                          {
41   glm::mat4 modelMatrix(1\&.0f);
42 
43 #if NDEBUG
44 
45   // dragon_model = glm::translate(dragon_model, glm::vec3(0\&.0f, -40\&.0f,
46   // -50\&.0f));
47   modelMatrix = glm::scale(modelMatrix, glm::vec3(1\&.0f, 1\&.0f, 1\&.0f));
48   /*dragon_model = glm::rotate(dragon_model, glm::radians(-90\&.f),
49      glm::vec3(1\&.0f, 0\&.0f, 0\&.0f)); dragon_model = glm::rotate(dragon_model,
50      glm::radians(angle), glm::vec3(0\&.0f, 0\&.0f, 1\&.0f));*/
51 
52 #else
53 
54 // dragon_model = glm::translate(dragon_model, glm::vec3(0\&.0f, -40\&.0f,
55 // -50\&.0f));
56 #if SULO_MODE
57   modelMatrix = glm::scale(modelMatrix, glm::vec3(60\&.0f, 60\&.0f, 60\&.0f));
58 #else
59   modelMatrix = glm::scale(modelMatrix, glm::vec3(60\&.0f, 60\&.0f, 60\&.0f));
60   modelMatrix = glm::rotate(modelMatrix, glm::radians(-90\&.f),
61                             glm::vec3(1\&.0f, 0\&.0f, 0\&.0f));
62   modelMatrix =
63       glm::rotate(modelMatrix, glm::radians(90\&.f), glm::vec3(0\&.0f, 0\&.0f, 1\&.0f));
64 #endif
65 
66 #endif
67 
68   return modelMatrix;
69 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for GraphicsEngine from the source code\&.
